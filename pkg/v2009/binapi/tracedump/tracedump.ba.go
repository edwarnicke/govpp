// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.4.0-dev
//  VPP:              20.09-release
// source: /usr/share/vpp/api/plugins/tracedump.api.json

// Package tracedump contains generated bindings for API file tracedump.api.
//
// Contents:
//   3 messages
//
package tracedump

import (
	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "tracedump"
	APIVersion = "0.1.0"
	VersionCrc = 0xd6940891
)

// TraceDetails defines message 'trace_details'.
type TraceDetails struct {
	ThreadID       uint32 `binapi:"u32,name=thread_id" json:"thread_id,omitempty"`
	Position       uint32 `binapi:"u32,name=position" json:"position,omitempty"`
	MoreThisThread uint8  `binapi:"u8,name=more_this_thread" json:"more_this_thread,omitempty"`
	MoreThreads    uint8  `binapi:"u8,name=more_threads" json:"more_threads,omitempty"`
	Done           uint8  `binapi:"u8,name=done" json:"done,omitempty"`
	TraceData      string `binapi:"string[],name=trace_data" json:"trace_data,omitempty"`
}

func (m *TraceDetails) Reset()               { *m = TraceDetails{} }
func (*TraceDetails) GetMessageName() string { return "trace_details" }
func (*TraceDetails) GetCrcString() string   { return "3f211194" }
func (*TraceDetails) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *TraceDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                    // m.ThreadID
	size += 4                    // m.Position
	size += 1                    // m.MoreThisThread
	size += 1                    // m.MoreThreads
	size += 1                    // m.Done
	size += 4 + len(m.TraceData) // m.TraceData
	return size
}
func (m *TraceDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ThreadID)
	buf.EncodeUint32(m.Position)
	buf.EncodeUint8(m.MoreThisThread)
	buf.EncodeUint8(m.MoreThreads)
	buf.EncodeUint8(m.Done)
	buf.EncodeString(m.TraceData, 0)
	return buf.Bytes(), nil
}
func (m *TraceDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ThreadID = buf.DecodeUint32()
	m.Position = buf.DecodeUint32()
	m.MoreThisThread = buf.DecodeUint8()
	m.MoreThreads = buf.DecodeUint8()
	m.Done = buf.DecodeUint8()
	m.TraceData = buf.DecodeString(0)
	return nil
}

// TraceDump defines message 'trace_dump'.
type TraceDump struct {
	ClearCache uint8  `binapi:"u8,name=clear_cache" json:"clear_cache,omitempty"`
	ThreadID   uint32 `binapi:"u32,name=thread_id" json:"thread_id,omitempty"`
	Position   uint32 `binapi:"u32,name=position" json:"position,omitempty"`
	MaxRecords uint32 `binapi:"u32,name=max_records" json:"max_records,omitempty"`
}

func (m *TraceDump) Reset()               { *m = TraceDump{} }
func (*TraceDump) GetMessageName() string { return "trace_dump" }
func (*TraceDump) GetCrcString() string   { return "c7d6681f" }
func (*TraceDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *TraceDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.ClearCache
	size += 4 // m.ThreadID
	size += 4 // m.Position
	size += 4 // m.MaxRecords
	return size
}
func (m *TraceDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.ClearCache)
	buf.EncodeUint32(m.ThreadID)
	buf.EncodeUint32(m.Position)
	buf.EncodeUint32(m.MaxRecords)
	return buf.Bytes(), nil
}
func (m *TraceDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ClearCache = buf.DecodeUint8()
	m.ThreadID = buf.DecodeUint32()
	m.Position = buf.DecodeUint32()
	m.MaxRecords = buf.DecodeUint32()
	return nil
}

// TraceDumpReply defines message 'trace_dump_reply'.
type TraceDumpReply struct {
	Retval         int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	LastThreadID   uint32 `binapi:"u32,name=last_thread_id" json:"last_thread_id,omitempty"`
	LastPosition   uint32 `binapi:"u32,name=last_position" json:"last_position,omitempty"`
	MoreThisThread uint8  `binapi:"u8,name=more_this_thread" json:"more_this_thread,omitempty"`
	MoreThreads    uint8  `binapi:"u8,name=more_threads" json:"more_threads,omitempty"`
	FlushOnly      uint8  `binapi:"u8,name=flush_only" json:"flush_only,omitempty"`
	Done           uint8  `binapi:"u8,name=done" json:"done,omitempty"`
}

func (m *TraceDumpReply) Reset()               { *m = TraceDumpReply{} }
func (*TraceDumpReply) GetMessageName() string { return "trace_dump_reply" }
func (*TraceDumpReply) GetCrcString() string   { return "e0e87f9d" }
func (*TraceDumpReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *TraceDumpReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.LastThreadID
	size += 4 // m.LastPosition
	size += 1 // m.MoreThisThread
	size += 1 // m.MoreThreads
	size += 1 // m.FlushOnly
	size += 1 // m.Done
	return size
}
func (m *TraceDumpReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.LastThreadID)
	buf.EncodeUint32(m.LastPosition)
	buf.EncodeUint8(m.MoreThisThread)
	buf.EncodeUint8(m.MoreThreads)
	buf.EncodeUint8(m.FlushOnly)
	buf.EncodeUint8(m.Done)
	return buf.Bytes(), nil
}
func (m *TraceDumpReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.LastThreadID = buf.DecodeUint32()
	m.LastPosition = buf.DecodeUint32()
	m.MoreThisThread = buf.DecodeUint8()
	m.MoreThreads = buf.DecodeUint8()
	m.FlushOnly = buf.DecodeUint8()
	m.Done = buf.DecodeUint8()
	return nil
}

func init() { file_tracedump_binapi_init() }
func file_tracedump_binapi_init() {
	api.RegisterMessage((*TraceDetails)(nil), "trace_details_3f211194")
	api.RegisterMessage((*TraceDump)(nil), "trace_dump_c7d6681f")
	api.RegisterMessage((*TraceDumpReply)(nil), "trace_dump_reply_e0e87f9d")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*TraceDetails)(nil),
		(*TraceDump)(nil),
		(*TraceDumpReply)(nil),
	}
}
