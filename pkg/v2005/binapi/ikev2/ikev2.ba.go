// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.4.0-dev
//  VPP:              20.05-release
// source: /usr/share/vpp/api/plugins/ikev2.api.json

// Package ikev2 contains generated bindings for API file ikev2.api.
//
// Contents:
//  36 messages
//
package ikev2

import (
	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
	interface_types "github.com/edwarnicke/govpp/pkg/v2005/binapi/interface_types"
	ip_types "github.com/edwarnicke/govpp/pkg/v2005/binapi/ip_types"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "ikev2"
	APIVersion = "1.0.1"
	VersionCrc = 0x2ebaa2d8
)

// Ikev2InitiateDelChildSa defines message 'ikev2_initiate_del_child_sa'.
type Ikev2InitiateDelChildSa struct {
	Ispi uint32 `binapi:"u32,name=ispi" json:"ispi,omitempty"`
}

func (m *Ikev2InitiateDelChildSa) Reset()               { *m = Ikev2InitiateDelChildSa{} }
func (*Ikev2InitiateDelChildSa) GetMessageName() string { return "ikev2_initiate_del_child_sa" }
func (*Ikev2InitiateDelChildSa) GetCrcString() string   { return "7f004d2e" }
func (*Ikev2InitiateDelChildSa) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2InitiateDelChildSa) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Ispi
	return size
}
func (m *Ikev2InitiateDelChildSa) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Ispi)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateDelChildSa) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Ispi = buf.DecodeUint32()
	return nil
}

// Ikev2InitiateDelChildSaReply defines message 'ikev2_initiate_del_child_sa_reply'.
type Ikev2InitiateDelChildSaReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2InitiateDelChildSaReply) Reset() { *m = Ikev2InitiateDelChildSaReply{} }
func (*Ikev2InitiateDelChildSaReply) GetMessageName() string {
	return "ikev2_initiate_del_child_sa_reply"
}
func (*Ikev2InitiateDelChildSaReply) GetCrcString() string { return "e8d4e804" }
func (*Ikev2InitiateDelChildSaReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2InitiateDelChildSaReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2InitiateDelChildSaReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateDelChildSaReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2InitiateDelIkeSa defines message 'ikev2_initiate_del_ike_sa'.
type Ikev2InitiateDelIkeSa struct {
	Ispi uint64 `binapi:"u64,name=ispi" json:"ispi,omitempty"`
}

func (m *Ikev2InitiateDelIkeSa) Reset()               { *m = Ikev2InitiateDelIkeSa{} }
func (*Ikev2InitiateDelIkeSa) GetMessageName() string { return "ikev2_initiate_del_ike_sa" }
func (*Ikev2InitiateDelIkeSa) GetCrcString() string   { return "8d125bdd" }
func (*Ikev2InitiateDelIkeSa) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2InitiateDelIkeSa) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 8 // m.Ispi
	return size
}
func (m *Ikev2InitiateDelIkeSa) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint64(m.Ispi)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateDelIkeSa) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Ispi = buf.DecodeUint64()
	return nil
}

// Ikev2InitiateDelIkeSaReply defines message 'ikev2_initiate_del_ike_sa_reply'.
type Ikev2InitiateDelIkeSaReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2InitiateDelIkeSaReply) Reset()               { *m = Ikev2InitiateDelIkeSaReply{} }
func (*Ikev2InitiateDelIkeSaReply) GetMessageName() string { return "ikev2_initiate_del_ike_sa_reply" }
func (*Ikev2InitiateDelIkeSaReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2InitiateDelIkeSaReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2InitiateDelIkeSaReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2InitiateDelIkeSaReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateDelIkeSaReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2InitiateRekeyChildSa defines message 'ikev2_initiate_rekey_child_sa'.
type Ikev2InitiateRekeyChildSa struct {
	Ispi uint32 `binapi:"u32,name=ispi" json:"ispi,omitempty"`
}

func (m *Ikev2InitiateRekeyChildSa) Reset()               { *m = Ikev2InitiateRekeyChildSa{} }
func (*Ikev2InitiateRekeyChildSa) GetMessageName() string { return "ikev2_initiate_rekey_child_sa" }
func (*Ikev2InitiateRekeyChildSa) GetCrcString() string   { return "7f004d2e" }
func (*Ikev2InitiateRekeyChildSa) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2InitiateRekeyChildSa) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Ispi
	return size
}
func (m *Ikev2InitiateRekeyChildSa) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Ispi)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateRekeyChildSa) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Ispi = buf.DecodeUint32()
	return nil
}

// Ikev2InitiateRekeyChildSaReply defines message 'ikev2_initiate_rekey_child_sa_reply'.
type Ikev2InitiateRekeyChildSaReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2InitiateRekeyChildSaReply) Reset() { *m = Ikev2InitiateRekeyChildSaReply{} }
func (*Ikev2InitiateRekeyChildSaReply) GetMessageName() string {
	return "ikev2_initiate_rekey_child_sa_reply"
}
func (*Ikev2InitiateRekeyChildSaReply) GetCrcString() string { return "e8d4e804" }
func (*Ikev2InitiateRekeyChildSaReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2InitiateRekeyChildSaReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2InitiateRekeyChildSaReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateRekeyChildSaReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2InitiateSaInit defines message 'ikev2_initiate_sa_init'.
type Ikev2InitiateSaInit struct {
	Name string `binapi:"string[64],name=name" json:"name,omitempty"`
}

func (m *Ikev2InitiateSaInit) Reset()               { *m = Ikev2InitiateSaInit{} }
func (*Ikev2InitiateSaInit) GetMessageName() string { return "ikev2_initiate_sa_init" }
func (*Ikev2InitiateSaInit) GetCrcString() string   { return "ebf79a66" }
func (*Ikev2InitiateSaInit) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2InitiateSaInit) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	return size
}
func (m *Ikev2InitiateSaInit) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateSaInit) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	return nil
}

// Ikev2InitiateSaInitReply defines message 'ikev2_initiate_sa_init_reply'.
type Ikev2InitiateSaInitReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2InitiateSaInitReply) Reset()               { *m = Ikev2InitiateSaInitReply{} }
func (*Ikev2InitiateSaInitReply) GetMessageName() string { return "ikev2_initiate_sa_init_reply" }
func (*Ikev2InitiateSaInitReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2InitiateSaInitReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2InitiateSaInitReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2InitiateSaInitReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateSaInitReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2PluginGetVersion defines message 'ikev2_plugin_get_version'.
type Ikev2PluginGetVersion struct{}

func (m *Ikev2PluginGetVersion) Reset()               { *m = Ikev2PluginGetVersion{} }
func (*Ikev2PluginGetVersion) GetMessageName() string { return "ikev2_plugin_get_version" }
func (*Ikev2PluginGetVersion) GetCrcString() string   { return "51077d14" }
func (*Ikev2PluginGetVersion) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2PluginGetVersion) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Ikev2PluginGetVersion) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Ikev2PluginGetVersion) Unmarshal(b []byte) error {
	return nil
}

// Ikev2PluginGetVersionReply defines message 'ikev2_plugin_get_version_reply'.
type Ikev2PluginGetVersionReply struct {
	Major uint32 `binapi:"u32,name=major" json:"major,omitempty"`
	Minor uint32 `binapi:"u32,name=minor" json:"minor,omitempty"`
}

func (m *Ikev2PluginGetVersionReply) Reset()               { *m = Ikev2PluginGetVersionReply{} }
func (*Ikev2PluginGetVersionReply) GetMessageName() string { return "ikev2_plugin_get_version_reply" }
func (*Ikev2PluginGetVersionReply) GetCrcString() string   { return "9b32cf86" }
func (*Ikev2PluginGetVersionReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2PluginGetVersionReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Major
	size += 4 // m.Minor
	return size
}
func (m *Ikev2PluginGetVersionReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Major)
	buf.EncodeUint32(m.Minor)
	return buf.Bytes(), nil
}
func (m *Ikev2PluginGetVersionReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Major = buf.DecodeUint32()
	m.Minor = buf.DecodeUint32()
	return nil
}

// Ikev2ProfileAddDel defines message 'ikev2_profile_add_del'.
type Ikev2ProfileAddDel struct {
	Name  string `binapi:"string[64],name=name" json:"name,omitempty"`
	IsAdd bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *Ikev2ProfileAddDel) Reset()               { *m = Ikev2ProfileAddDel{} }
func (*Ikev2ProfileAddDel) GetMessageName() string { return "ikev2_profile_add_del" }
func (*Ikev2ProfileAddDel) GetCrcString() string   { return "2c925b55" }
func (*Ikev2ProfileAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2ProfileAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 1  // m.IsAdd
	return size
}
func (m *Ikev2ProfileAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.IsAdd = buf.DecodeBool()
	return nil
}

// Ikev2ProfileAddDelReply defines message 'ikev2_profile_add_del_reply'.
type Ikev2ProfileAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileAddDelReply) Reset()               { *m = Ikev2ProfileAddDelReply{} }
func (*Ikev2ProfileAddDelReply) GetMessageName() string { return "ikev2_profile_add_del_reply" }
func (*Ikev2ProfileAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2ProfileAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2ProfileAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetAuth defines message 'ikev2_profile_set_auth'.
type Ikev2ProfileSetAuth struct {
	Name       string `binapi:"string[64],name=name" json:"name,omitempty"`
	AuthMethod uint8  `binapi:"u8,name=auth_method" json:"auth_method,omitempty"`
	IsHex      bool   `binapi:"bool,name=is_hex" json:"is_hex,omitempty"`
	DataLen    uint32 `binapi:"u32,name=data_len" json:"-"`
	Data       []byte `binapi:"u8[data_len],name=data" json:"data,omitempty"`
}

func (m *Ikev2ProfileSetAuth) Reset()               { *m = Ikev2ProfileSetAuth{} }
func (*Ikev2ProfileSetAuth) GetMessageName() string { return "ikev2_profile_set_auth" }
func (*Ikev2ProfileSetAuth) GetCrcString() string   { return "642c97cd" }
func (*Ikev2ProfileSetAuth) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2ProfileSetAuth) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64              // m.Name
	size += 1               // m.AuthMethod
	size += 1               // m.IsHex
	size += 4               // m.DataLen
	size += 1 * len(m.Data) // m.Data
	return size
}
func (m *Ikev2ProfileSetAuth) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint8(m.AuthMethod)
	buf.EncodeBool(m.IsHex)
	buf.EncodeUint32(uint32(len(m.Data)))
	buf.EncodeBytes(m.Data, 0)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetAuth) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.AuthMethod = buf.DecodeUint8()
	m.IsHex = buf.DecodeBool()
	m.DataLen = buf.DecodeUint32()
	m.Data = make([]byte, m.DataLen)
	copy(m.Data, buf.DecodeBytes(len(m.Data)))
	return nil
}

// Ikev2ProfileSetAuthReply defines message 'ikev2_profile_set_auth_reply'.
type Ikev2ProfileSetAuthReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetAuthReply) Reset()               { *m = Ikev2ProfileSetAuthReply{} }
func (*Ikev2ProfileSetAuthReply) GetMessageName() string { return "ikev2_profile_set_auth_reply" }
func (*Ikev2ProfileSetAuthReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2ProfileSetAuthReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2ProfileSetAuthReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetAuthReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetAuthReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetID defines message 'ikev2_profile_set_id'.
type Ikev2ProfileSetID struct {
	Name    string `binapi:"string[64],name=name" json:"name,omitempty"`
	IsLocal bool   `binapi:"bool,name=is_local" json:"is_local,omitempty"`
	IDType  uint8  `binapi:"u8,name=id_type" json:"id_type,omitempty"`
	DataLen uint32 `binapi:"u32,name=data_len" json:"-"`
	Data    []byte `binapi:"u8[data_len],name=data" json:"data,omitempty"`
}

func (m *Ikev2ProfileSetID) Reset()               { *m = Ikev2ProfileSetID{} }
func (*Ikev2ProfileSetID) GetMessageName() string { return "ikev2_profile_set_id" }
func (*Ikev2ProfileSetID) GetCrcString() string   { return "4d7e2418" }
func (*Ikev2ProfileSetID) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2ProfileSetID) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64              // m.Name
	size += 1               // m.IsLocal
	size += 1               // m.IDType
	size += 4               // m.DataLen
	size += 1 * len(m.Data) // m.Data
	return size
}
func (m *Ikev2ProfileSetID) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeBool(m.IsLocal)
	buf.EncodeUint8(m.IDType)
	buf.EncodeUint32(uint32(len(m.Data)))
	buf.EncodeBytes(m.Data, 0)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetID) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.IsLocal = buf.DecodeBool()
	m.IDType = buf.DecodeUint8()
	m.DataLen = buf.DecodeUint32()
	m.Data = make([]byte, m.DataLen)
	copy(m.Data, buf.DecodeBytes(len(m.Data)))
	return nil
}

// Ikev2ProfileSetIDReply defines message 'ikev2_profile_set_id_reply'.
type Ikev2ProfileSetIDReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetIDReply) Reset()               { *m = Ikev2ProfileSetIDReply{} }
func (*Ikev2ProfileSetIDReply) GetMessageName() string { return "ikev2_profile_set_id_reply" }
func (*Ikev2ProfileSetIDReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2ProfileSetIDReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2ProfileSetIDReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetIDReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetIDReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetIpsecUDPPort defines message 'ikev2_profile_set_ipsec_udp_port'.
type Ikev2ProfileSetIpsecUDPPort struct {
	IsSet uint8  `binapi:"u8,name=is_set" json:"is_set,omitempty"`
	Port  uint16 `binapi:"u16,name=port" json:"port,omitempty"`
	Name  string `binapi:"string[64],name=name" json:"name,omitempty"`
}

func (m *Ikev2ProfileSetIpsecUDPPort) Reset() { *m = Ikev2ProfileSetIpsecUDPPort{} }
func (*Ikev2ProfileSetIpsecUDPPort) GetMessageName() string {
	return "ikev2_profile_set_ipsec_udp_port"
}
func (*Ikev2ProfileSetIpsecUDPPort) GetCrcString() string { return "615ce758" }
func (*Ikev2ProfileSetIpsecUDPPort) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2ProfileSetIpsecUDPPort) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1  // m.IsSet
	size += 2  // m.Port
	size += 64 // m.Name
	return size
}
func (m *Ikev2ProfileSetIpsecUDPPort) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsSet)
	buf.EncodeUint16(m.Port)
	buf.EncodeString(m.Name, 64)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetIpsecUDPPort) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsSet = buf.DecodeUint8()
	m.Port = buf.DecodeUint16()
	m.Name = buf.DecodeString(64)
	return nil
}

// Ikev2ProfileSetIpsecUDPPortReply defines message 'ikev2_profile_set_ipsec_udp_port_reply'.
type Ikev2ProfileSetIpsecUDPPortReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetIpsecUDPPortReply) Reset() { *m = Ikev2ProfileSetIpsecUDPPortReply{} }
func (*Ikev2ProfileSetIpsecUDPPortReply) GetMessageName() string {
	return "ikev2_profile_set_ipsec_udp_port_reply"
}
func (*Ikev2ProfileSetIpsecUDPPortReply) GetCrcString() string { return "e8d4e804" }
func (*Ikev2ProfileSetIpsecUDPPortReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2ProfileSetIpsecUDPPortReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetIpsecUDPPortReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetIpsecUDPPortReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetLiveness defines message 'ikev2_profile_set_liveness'.
type Ikev2ProfileSetLiveness struct {
	Period     uint32 `binapi:"u32,name=period" json:"period,omitempty"`
	MaxRetries uint32 `binapi:"u32,name=max_retries" json:"max_retries,omitempty"`
}

func (m *Ikev2ProfileSetLiveness) Reset()               { *m = Ikev2ProfileSetLiveness{} }
func (*Ikev2ProfileSetLiveness) GetMessageName() string { return "ikev2_profile_set_liveness" }
func (*Ikev2ProfileSetLiveness) GetCrcString() string   { return "6bdf4d65" }
func (*Ikev2ProfileSetLiveness) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2ProfileSetLiveness) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Period
	size += 4 // m.MaxRetries
	return size
}
func (m *Ikev2ProfileSetLiveness) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Period)
	buf.EncodeUint32(m.MaxRetries)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetLiveness) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Period = buf.DecodeUint32()
	m.MaxRetries = buf.DecodeUint32()
	return nil
}

// Ikev2ProfileSetLivenessReply defines message 'ikev2_profile_set_liveness_reply'.
type Ikev2ProfileSetLivenessReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetLivenessReply) Reset() { *m = Ikev2ProfileSetLivenessReply{} }
func (*Ikev2ProfileSetLivenessReply) GetMessageName() string {
	return "ikev2_profile_set_liveness_reply"
}
func (*Ikev2ProfileSetLivenessReply) GetCrcString() string { return "e8d4e804" }
func (*Ikev2ProfileSetLivenessReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2ProfileSetLivenessReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetLivenessReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetLivenessReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetTs defines message 'ikev2_profile_set_ts'.
type Ikev2ProfileSetTs struct {
	Name      string `binapi:"string[64],name=name" json:"name,omitempty"`
	IsLocal   bool   `binapi:"bool,name=is_local" json:"is_local,omitempty"`
	Proto     uint8  `binapi:"u8,name=proto" json:"proto,omitempty"`
	StartPort uint16 `binapi:"u16,name=start_port" json:"start_port,omitempty"`
	EndPort   uint16 `binapi:"u16,name=end_port" json:"end_port,omitempty"`
	StartAddr uint32 `binapi:"u32,name=start_addr" json:"start_addr,omitempty"`
	EndAddr   uint32 `binapi:"u32,name=end_addr" json:"end_addr,omitempty"`
}

func (m *Ikev2ProfileSetTs) Reset()               { *m = Ikev2ProfileSetTs{} }
func (*Ikev2ProfileSetTs) GetMessageName() string { return "ikev2_profile_set_ts" }
func (*Ikev2ProfileSetTs) GetCrcString() string   { return "64d55c16" }
func (*Ikev2ProfileSetTs) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2ProfileSetTs) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 1  // m.IsLocal
	size += 1  // m.Proto
	size += 2  // m.StartPort
	size += 2  // m.EndPort
	size += 4  // m.StartAddr
	size += 4  // m.EndAddr
	return size
}
func (m *Ikev2ProfileSetTs) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeBool(m.IsLocal)
	buf.EncodeUint8(m.Proto)
	buf.EncodeUint16(m.StartPort)
	buf.EncodeUint16(m.EndPort)
	buf.EncodeUint32(m.StartAddr)
	buf.EncodeUint32(m.EndAddr)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetTs) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.IsLocal = buf.DecodeBool()
	m.Proto = buf.DecodeUint8()
	m.StartPort = buf.DecodeUint16()
	m.EndPort = buf.DecodeUint16()
	m.StartAddr = buf.DecodeUint32()
	m.EndAddr = buf.DecodeUint32()
	return nil
}

// Ikev2ProfileSetTsReply defines message 'ikev2_profile_set_ts_reply'.
type Ikev2ProfileSetTsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetTsReply) Reset()               { *m = Ikev2ProfileSetTsReply{} }
func (*Ikev2ProfileSetTsReply) GetMessageName() string { return "ikev2_profile_set_ts_reply" }
func (*Ikev2ProfileSetTsReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2ProfileSetTsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2ProfileSetTsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetTsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetTsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetUDPEncap defines message 'ikev2_profile_set_udp_encap'.
type Ikev2ProfileSetUDPEncap struct {
	Name string `binapi:"string[64],name=name" json:"name,omitempty"`
}

func (m *Ikev2ProfileSetUDPEncap) Reset()               { *m = Ikev2ProfileSetUDPEncap{} }
func (*Ikev2ProfileSetUDPEncap) GetMessageName() string { return "ikev2_profile_set_udp_encap" }
func (*Ikev2ProfileSetUDPEncap) GetCrcString() string   { return "ebf79a66" }
func (*Ikev2ProfileSetUDPEncap) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2ProfileSetUDPEncap) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	return size
}
func (m *Ikev2ProfileSetUDPEncap) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetUDPEncap) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	return nil
}

// Ikev2ProfileSetUDPEncapReply defines message 'ikev2_profile_set_udp_encap_reply'.
type Ikev2ProfileSetUDPEncapReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetUDPEncapReply) Reset() { *m = Ikev2ProfileSetUDPEncapReply{} }
func (*Ikev2ProfileSetUDPEncapReply) GetMessageName() string {
	return "ikev2_profile_set_udp_encap_reply"
}
func (*Ikev2ProfileSetUDPEncapReply) GetCrcString() string { return "e8d4e804" }
func (*Ikev2ProfileSetUDPEncapReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2ProfileSetUDPEncapReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetUDPEncapReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetUDPEncapReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetEspTransforms defines message 'ikev2_set_esp_transforms'.
type Ikev2SetEspTransforms struct {
	Name          string `binapi:"string[64],name=name" json:"name,omitempty"`
	CryptoAlg     uint32 `binapi:"u32,name=crypto_alg" json:"crypto_alg,omitempty"`
	CryptoKeySize uint32 `binapi:"u32,name=crypto_key_size" json:"crypto_key_size,omitempty"`
	IntegAlg      uint32 `binapi:"u32,name=integ_alg" json:"integ_alg,omitempty"`
	DhGroup       uint32 `binapi:"u32,name=dh_group" json:"dh_group,omitempty"`
}

func (m *Ikev2SetEspTransforms) Reset()               { *m = Ikev2SetEspTransforms{} }
func (*Ikev2SetEspTransforms) GetMessageName() string { return "ikev2_set_esp_transforms" }
func (*Ikev2SetEspTransforms) GetCrcString() string   { return "936a1a37" }
func (*Ikev2SetEspTransforms) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2SetEspTransforms) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 4  // m.CryptoAlg
	size += 4  // m.CryptoKeySize
	size += 4  // m.IntegAlg
	size += 4  // m.DhGroup
	return size
}
func (m *Ikev2SetEspTransforms) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint32(m.CryptoAlg)
	buf.EncodeUint32(m.CryptoKeySize)
	buf.EncodeUint32(m.IntegAlg)
	buf.EncodeUint32(m.DhGroup)
	return buf.Bytes(), nil
}
func (m *Ikev2SetEspTransforms) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.CryptoAlg = buf.DecodeUint32()
	m.CryptoKeySize = buf.DecodeUint32()
	m.IntegAlg = buf.DecodeUint32()
	m.DhGroup = buf.DecodeUint32()
	return nil
}

// Ikev2SetEspTransformsReply defines message 'ikev2_set_esp_transforms_reply'.
type Ikev2SetEspTransformsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetEspTransformsReply) Reset()               { *m = Ikev2SetEspTransformsReply{} }
func (*Ikev2SetEspTransformsReply) GetMessageName() string { return "ikev2_set_esp_transforms_reply" }
func (*Ikev2SetEspTransformsReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetEspTransformsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2SetEspTransformsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetEspTransformsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetEspTransformsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetIkeTransforms defines message 'ikev2_set_ike_transforms'.
type Ikev2SetIkeTransforms struct {
	Name          string `binapi:"string[64],name=name" json:"name,omitempty"`
	CryptoAlg     uint32 `binapi:"u32,name=crypto_alg" json:"crypto_alg,omitempty"`
	CryptoKeySize uint32 `binapi:"u32,name=crypto_key_size" json:"crypto_key_size,omitempty"`
	IntegAlg      uint32 `binapi:"u32,name=integ_alg" json:"integ_alg,omitempty"`
	DhGroup       uint32 `binapi:"u32,name=dh_group" json:"dh_group,omitempty"`
}

func (m *Ikev2SetIkeTransforms) Reset()               { *m = Ikev2SetIkeTransforms{} }
func (*Ikev2SetIkeTransforms) GetMessageName() string { return "ikev2_set_ike_transforms" }
func (*Ikev2SetIkeTransforms) GetCrcString() string   { return "936a1a37" }
func (*Ikev2SetIkeTransforms) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2SetIkeTransforms) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 4  // m.CryptoAlg
	size += 4  // m.CryptoKeySize
	size += 4  // m.IntegAlg
	size += 4  // m.DhGroup
	return size
}
func (m *Ikev2SetIkeTransforms) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint32(m.CryptoAlg)
	buf.EncodeUint32(m.CryptoKeySize)
	buf.EncodeUint32(m.IntegAlg)
	buf.EncodeUint32(m.DhGroup)
	return buf.Bytes(), nil
}
func (m *Ikev2SetIkeTransforms) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.CryptoAlg = buf.DecodeUint32()
	m.CryptoKeySize = buf.DecodeUint32()
	m.IntegAlg = buf.DecodeUint32()
	m.DhGroup = buf.DecodeUint32()
	return nil
}

// Ikev2SetIkeTransformsReply defines message 'ikev2_set_ike_transforms_reply'.
type Ikev2SetIkeTransformsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetIkeTransformsReply) Reset()               { *m = Ikev2SetIkeTransformsReply{} }
func (*Ikev2SetIkeTransformsReply) GetMessageName() string { return "ikev2_set_ike_transforms_reply" }
func (*Ikev2SetIkeTransformsReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetIkeTransformsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2SetIkeTransformsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetIkeTransformsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetIkeTransformsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetLocalKey defines message 'ikev2_set_local_key'.
type Ikev2SetLocalKey struct {
	KeyFile string `binapi:"string[256],name=key_file" json:"key_file,omitempty"`
}

func (m *Ikev2SetLocalKey) Reset()               { *m = Ikev2SetLocalKey{} }
func (*Ikev2SetLocalKey) GetMessageName() string { return "ikev2_set_local_key" }
func (*Ikev2SetLocalKey) GetCrcString() string   { return "799b69ec" }
func (*Ikev2SetLocalKey) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2SetLocalKey) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 256 // m.KeyFile
	return size
}
func (m *Ikev2SetLocalKey) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.KeyFile, 256)
	return buf.Bytes(), nil
}
func (m *Ikev2SetLocalKey) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.KeyFile = buf.DecodeString(256)
	return nil
}

// Ikev2SetLocalKeyReply defines message 'ikev2_set_local_key_reply'.
type Ikev2SetLocalKeyReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetLocalKeyReply) Reset()               { *m = Ikev2SetLocalKeyReply{} }
func (*Ikev2SetLocalKeyReply) GetMessageName() string { return "ikev2_set_local_key_reply" }
func (*Ikev2SetLocalKeyReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetLocalKeyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2SetLocalKeyReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetLocalKeyReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetLocalKeyReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetResponder defines message 'ikev2_set_responder'.
type Ikev2SetResponder struct {
	Name      string                         `binapi:"string[64],name=name" json:"name,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Address   ip_types.IP4Address            `binapi:"ip4_address,name=address" json:"address,omitempty"`
}

func (m *Ikev2SetResponder) Reset()               { *m = Ikev2SetResponder{} }
func (*Ikev2SetResponder) GetMessageName() string { return "ikev2_set_responder" }
func (*Ikev2SetResponder) GetCrcString() string   { return "f0d3dc80" }
func (*Ikev2SetResponder) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2SetResponder) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64    // m.Name
	size += 4     // m.SwIfIndex
	size += 1 * 4 // m.Address
	return size
}
func (m *Ikev2SetResponder) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBytes(m.Address[:], 4)
	return buf.Bytes(), nil
}
func (m *Ikev2SetResponder) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	copy(m.Address[:], buf.DecodeBytes(4))
	return nil
}

// Ikev2SetResponderReply defines message 'ikev2_set_responder_reply'.
type Ikev2SetResponderReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetResponderReply) Reset()               { *m = Ikev2SetResponderReply{} }
func (*Ikev2SetResponderReply) GetMessageName() string { return "ikev2_set_responder_reply" }
func (*Ikev2SetResponderReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetResponderReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2SetResponderReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetResponderReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetResponderReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetSaLifetime defines message 'ikev2_set_sa_lifetime'.
type Ikev2SetSaLifetime struct {
	Name            string `binapi:"string[64],name=name" json:"name,omitempty"`
	Lifetime        uint64 `binapi:"u64,name=lifetime" json:"lifetime,omitempty"`
	LifetimeJitter  uint32 `binapi:"u32,name=lifetime_jitter" json:"lifetime_jitter,omitempty"`
	Handover        uint32 `binapi:"u32,name=handover" json:"handover,omitempty"`
	LifetimeMaxdata uint64 `binapi:"u64,name=lifetime_maxdata" json:"lifetime_maxdata,omitempty"`
}

func (m *Ikev2SetSaLifetime) Reset()               { *m = Ikev2SetSaLifetime{} }
func (*Ikev2SetSaLifetime) GetMessageName() string { return "ikev2_set_sa_lifetime" }
func (*Ikev2SetSaLifetime) GetCrcString() string   { return "7039feaa" }
func (*Ikev2SetSaLifetime) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2SetSaLifetime) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 8  // m.Lifetime
	size += 4  // m.LifetimeJitter
	size += 4  // m.Handover
	size += 8  // m.LifetimeMaxdata
	return size
}
func (m *Ikev2SetSaLifetime) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint64(m.Lifetime)
	buf.EncodeUint32(m.LifetimeJitter)
	buf.EncodeUint32(m.Handover)
	buf.EncodeUint64(m.LifetimeMaxdata)
	return buf.Bytes(), nil
}
func (m *Ikev2SetSaLifetime) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.Lifetime = buf.DecodeUint64()
	m.LifetimeJitter = buf.DecodeUint32()
	m.Handover = buf.DecodeUint32()
	m.LifetimeMaxdata = buf.DecodeUint64()
	return nil
}

// Ikev2SetSaLifetimeReply defines message 'ikev2_set_sa_lifetime_reply'.
type Ikev2SetSaLifetimeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetSaLifetimeReply) Reset()               { *m = Ikev2SetSaLifetimeReply{} }
func (*Ikev2SetSaLifetimeReply) GetMessageName() string { return "ikev2_set_sa_lifetime_reply" }
func (*Ikev2SetSaLifetimeReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetSaLifetimeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2SetSaLifetimeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetSaLifetimeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetSaLifetimeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetTunnelInterface defines message 'ikev2_set_tunnel_interface'.
type Ikev2SetTunnelInterface struct {
	Name      string                         `binapi:"string[64],name=name" json:"name,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Ikev2SetTunnelInterface) Reset()               { *m = Ikev2SetTunnelInterface{} }
func (*Ikev2SetTunnelInterface) GetMessageName() string { return "ikev2_set_tunnel_interface" }
func (*Ikev2SetTunnelInterface) GetCrcString() string   { return "ca67182c" }
func (*Ikev2SetTunnelInterface) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Ikev2SetTunnelInterface) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 4  // m.SwIfIndex
	return size
}
func (m *Ikev2SetTunnelInterface) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Ikev2SetTunnelInterface) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Ikev2SetTunnelInterfaceReply defines message 'ikev2_set_tunnel_interface_reply'.
type Ikev2SetTunnelInterfaceReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetTunnelInterfaceReply) Reset() { *m = Ikev2SetTunnelInterfaceReply{} }
func (*Ikev2SetTunnelInterfaceReply) GetMessageName() string {
	return "ikev2_set_tunnel_interface_reply"
}
func (*Ikev2SetTunnelInterfaceReply) GetCrcString() string { return "e8d4e804" }
func (*Ikev2SetTunnelInterfaceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Ikev2SetTunnelInterfaceReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetTunnelInterfaceReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetTunnelInterfaceReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_ikev2_binapi_init() }
func file_ikev2_binapi_init() {
	api.RegisterMessage((*Ikev2InitiateDelChildSa)(nil), "ikev2_initiate_del_child_sa_7f004d2e")
	api.RegisterMessage((*Ikev2InitiateDelChildSaReply)(nil), "ikev2_initiate_del_child_sa_reply_e8d4e804")
	api.RegisterMessage((*Ikev2InitiateDelIkeSa)(nil), "ikev2_initiate_del_ike_sa_8d125bdd")
	api.RegisterMessage((*Ikev2InitiateDelIkeSaReply)(nil), "ikev2_initiate_del_ike_sa_reply_e8d4e804")
	api.RegisterMessage((*Ikev2InitiateRekeyChildSa)(nil), "ikev2_initiate_rekey_child_sa_7f004d2e")
	api.RegisterMessage((*Ikev2InitiateRekeyChildSaReply)(nil), "ikev2_initiate_rekey_child_sa_reply_e8d4e804")
	api.RegisterMessage((*Ikev2InitiateSaInit)(nil), "ikev2_initiate_sa_init_ebf79a66")
	api.RegisterMessage((*Ikev2InitiateSaInitReply)(nil), "ikev2_initiate_sa_init_reply_e8d4e804")
	api.RegisterMessage((*Ikev2PluginGetVersion)(nil), "ikev2_plugin_get_version_51077d14")
	api.RegisterMessage((*Ikev2PluginGetVersionReply)(nil), "ikev2_plugin_get_version_reply_9b32cf86")
	api.RegisterMessage((*Ikev2ProfileAddDel)(nil), "ikev2_profile_add_del_2c925b55")
	api.RegisterMessage((*Ikev2ProfileAddDelReply)(nil), "ikev2_profile_add_del_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetAuth)(nil), "ikev2_profile_set_auth_642c97cd")
	api.RegisterMessage((*Ikev2ProfileSetAuthReply)(nil), "ikev2_profile_set_auth_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetID)(nil), "ikev2_profile_set_id_4d7e2418")
	api.RegisterMessage((*Ikev2ProfileSetIDReply)(nil), "ikev2_profile_set_id_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetIpsecUDPPort)(nil), "ikev2_profile_set_ipsec_udp_port_615ce758")
	api.RegisterMessage((*Ikev2ProfileSetIpsecUDPPortReply)(nil), "ikev2_profile_set_ipsec_udp_port_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetLiveness)(nil), "ikev2_profile_set_liveness_6bdf4d65")
	api.RegisterMessage((*Ikev2ProfileSetLivenessReply)(nil), "ikev2_profile_set_liveness_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetTs)(nil), "ikev2_profile_set_ts_64d55c16")
	api.RegisterMessage((*Ikev2ProfileSetTsReply)(nil), "ikev2_profile_set_ts_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetUDPEncap)(nil), "ikev2_profile_set_udp_encap_ebf79a66")
	api.RegisterMessage((*Ikev2ProfileSetUDPEncapReply)(nil), "ikev2_profile_set_udp_encap_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetEspTransforms)(nil), "ikev2_set_esp_transforms_936a1a37")
	api.RegisterMessage((*Ikev2SetEspTransformsReply)(nil), "ikev2_set_esp_transforms_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetIkeTransforms)(nil), "ikev2_set_ike_transforms_936a1a37")
	api.RegisterMessage((*Ikev2SetIkeTransformsReply)(nil), "ikev2_set_ike_transforms_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetLocalKey)(nil), "ikev2_set_local_key_799b69ec")
	api.RegisterMessage((*Ikev2SetLocalKeyReply)(nil), "ikev2_set_local_key_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetResponder)(nil), "ikev2_set_responder_f0d3dc80")
	api.RegisterMessage((*Ikev2SetResponderReply)(nil), "ikev2_set_responder_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetSaLifetime)(nil), "ikev2_set_sa_lifetime_7039feaa")
	api.RegisterMessage((*Ikev2SetSaLifetimeReply)(nil), "ikev2_set_sa_lifetime_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetTunnelInterface)(nil), "ikev2_set_tunnel_interface_ca67182c")
	api.RegisterMessage((*Ikev2SetTunnelInterfaceReply)(nil), "ikev2_set_tunnel_interface_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*Ikev2InitiateDelChildSa)(nil),
		(*Ikev2InitiateDelChildSaReply)(nil),
		(*Ikev2InitiateDelIkeSa)(nil),
		(*Ikev2InitiateDelIkeSaReply)(nil),
		(*Ikev2InitiateRekeyChildSa)(nil),
		(*Ikev2InitiateRekeyChildSaReply)(nil),
		(*Ikev2InitiateSaInit)(nil),
		(*Ikev2InitiateSaInitReply)(nil),
		(*Ikev2PluginGetVersion)(nil),
		(*Ikev2PluginGetVersionReply)(nil),
		(*Ikev2ProfileAddDel)(nil),
		(*Ikev2ProfileAddDelReply)(nil),
		(*Ikev2ProfileSetAuth)(nil),
		(*Ikev2ProfileSetAuthReply)(nil),
		(*Ikev2ProfileSetID)(nil),
		(*Ikev2ProfileSetIDReply)(nil),
		(*Ikev2ProfileSetIpsecUDPPort)(nil),
		(*Ikev2ProfileSetIpsecUDPPortReply)(nil),
		(*Ikev2ProfileSetLiveness)(nil),
		(*Ikev2ProfileSetLivenessReply)(nil),
		(*Ikev2ProfileSetTs)(nil),
		(*Ikev2ProfileSetTsReply)(nil),
		(*Ikev2ProfileSetUDPEncap)(nil),
		(*Ikev2ProfileSetUDPEncapReply)(nil),
		(*Ikev2SetEspTransforms)(nil),
		(*Ikev2SetEspTransformsReply)(nil),
		(*Ikev2SetIkeTransforms)(nil),
		(*Ikev2SetIkeTransformsReply)(nil),
		(*Ikev2SetLocalKey)(nil),
		(*Ikev2SetLocalKeyReply)(nil),
		(*Ikev2SetResponder)(nil),
		(*Ikev2SetResponderReply)(nil),
		(*Ikev2SetSaLifetime)(nil),
		(*Ikev2SetSaLifetimeReply)(nil),
		(*Ikev2SetTunnelInterface)(nil),
		(*Ikev2SetTunnelInterfaceReply)(nil),
	}
}
