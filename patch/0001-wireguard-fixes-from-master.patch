From 37d6cc12b229557aa7ea2ad8ba8d7e22ee7bcb18 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Beno=C3=AEt=20Ganne?= <bganne@cisco.com>
Date: Tue, 20 Oct 2020 14:12:20 +0200
Subject: [PATCH 1/4] wireguard: fixes from master

Type: fix

Signed-off-by: Artem Glazychev <artem.glazychev@xored.com>
Change-Id: I774fd3d1a36e6bf5d4ebb6303ae804291d84aa48
---
 src/plugins/wireguard/README.md              | 53 ++++++------------
 src/plugins/wireguard/test/test_wireguard.py |  6 +--
 src/plugins/wireguard/wireguard.c            |  1 +
 src/plugins/wireguard/wireguard.h            |  4 ++
 src/plugins/wireguard/wireguard_api.c        | 15 ++++++
 src/plugins/wireguard/wireguard_cli.c        | 17 ++++++
 src/plugins/wireguard/wireguard_handoff.c    | 57 ++++++++++++--------
 src/plugins/wireguard/wireguard_if.c         | 22 ++++++++
 src/plugins/wireguard/wireguard_if.h         |  1 +
 src/plugins/wireguard/wireguard_input.c      | 24 +++++----
 src/plugins/wireguard/wireguard_key.c        |  1 -
 src/plugins/wireguard/wireguard_key.h        |  1 -
 src/plugins/wireguard/wireguard_noise.c      |  8 +--
 src/plugins/wireguard/wireguard_output_tun.c |  1 +
 src/plugins/wireguard/wireguard_peer.c       |  2 +
 src/plugins/wireguard/wireguard_peer.h       |  2 +
 src/plugins/wireguard/wireguard_send.c       |  1 +
 src/plugins/wireguard/wireguard_send.h       |  1 +
 src/plugins/wireguard/wireguard_timer.c      | 46 ++++++++++++++--
 src/plugins/wireguard/wireguard_timer.h      |  1 -
 20 files changed, 182 insertions(+), 82 deletions(-)
 mode change 100755 => 100644 src/plugins/wireguard/wireguard_input.c
 mode change 100755 => 100644 src/plugins/wireguard/wireguard_peer.h
 mode change 100755 => 100644 src/plugins/wireguard/wireguard_timer.c

diff --git a/src/plugins/wireguard/README.md b/src/plugins/wireguard/README.md
index e313a3214..5348661d2 100755
--- a/src/plugins/wireguard/README.md
+++ b/src/plugins/wireguard/README.md
@@ -2,7 +2,7 @@
 
 ## Overview
 This plugin is an implementation of [wireguard protocol](https://www.wireguard.com/) for VPP. It allows one to create secure VPN tunnels.
-This implementation is based on [wireguard-openbsd](https://git.zx2c4.com/wireguard-openbsd/), using the implementaiton of *ipip-tunnel*.
+This implementation is based on [wireguard-openbsd](https://git.zx2c4.com/wireguard-openbsd/).
 
 ## Crypto
 
@@ -16,59 +16,40 @@ OpenSSL:
 - chachapoly1305
 
 ## Plugin usage example
-Usage is very similar to other wireguard implementations.
 
-### Create connection
-Create keys:
+### Create wireguard interface
 
 ```
-> vpp# wg genkey
-> *my_private_key*
-> vpp# wg pubkey <my_private_key>
-> *my_pub_key*
+> vpp# wireguard create listen-port <port> private-key <priv_key> src <src_ip4> [generate-key]
+> *wg_interface*
+> vpp# set int state <wg_interface> up
+> vpp# set int ip address <wg_interface> <wg_ip4>
 ```
 
-Create tunnel:
+### Add a peer configuration:
 ```
-> vpp# create ipip tunnel src <ip4_src> dst <ip4_dst>
-> *tun_name*
-> vpp# set int state <tun_name> up
-> vpp# set int ip address <tun_name> <tun_ip4>
+> vpp# wireguard peer add <wg_interface> public-key <pub_key_other> endpoint <ip4_dst> allowed-ip <prefix> dst-port <port_dst> persistent-keepalive [keepalive_interval]
+> vpp# *peer_idx*
 ```
 
-After this we can create wg-device. The UDP port is opened automatically.
-```
-> vpp# wg set device private-key <my_private_key> src-port <my_port>
-```
-
-Now, we can add a peer configuration:
-```
-> vpp# wg set peer public-key <peer_pub_key> endpoint <peer_ip4> allowed-ip <peer_tun_ip4> dst-port <peer_port> tunnel <tun_name> persistent-keepalive <keepalive_interval>
-```
-If you need to add more peers, don't forget to first create another ipip-tunnel.
-Ping.
-```
-> vpp# ping <peer_tun_ip4>
-```
 ### Show config
-To show device and all peer configurations:
 ```
-> vpp# show wg
+> vpp# show wireguard interface
+> vpp# show wireguard peer
 ```
 
 ### Remove peer
-Peer can be removed by its public-key.
 ```
-> vpp# wg remove peer <peer_pub_key>
+> vpp# wireguard peer remove <peer_idx>
 ```
-This removes the associated ipip tunnel as well
 
-### Clear all connections
+
+### Delete interface 
 ```
-> vpp# wg remove device
+> vpp# wireguard delete <wg_interface>
 ```
 
-## main next steps for improving this implementation
+## Main next steps for improving this implementation
 1. Use all benefits of VPP-engine.
-2. Add IP6 support (currently only supports IPv4))
+2. Add IPv6 support (currently only supports IPv4)
 3. Add DoS protection as in original protocol (using cookie)
diff --git a/src/plugins/wireguard/test/test_wireguard.py b/src/plugins/wireguard/test/test_wireguard.py
index cee1e938b..82ba26254 100755
--- a/src/plugins/wireguard/test/test_wireguard.py
+++ b/src/plugins/wireguard/test/test_wireguard.py
@@ -488,7 +488,7 @@ class TestWg(VppTestCase):
         wg_output_node_name = '/err/wg-output-tun/'
         wg_input_node_name = '/err/wg-input/'
 
-        port = 12323
+        port = 12333
 
         # Create interfaces
         wg0 = VppWgInterface(self,
@@ -602,7 +602,7 @@ class TestWg(VppTestCase):
 
     def test_wg_multi_peer(self):
         """ multiple peer setup """
-        port = 12323
+        port = 12343
 
         # Create interfaces
         wg0 = VppWgInterface(self,
@@ -670,7 +670,7 @@ class WireguardHandoffTests(TestWg):
         wg_output_node_name = '/err/wg-output-tun/'
         wg_input_node_name = '/err/wg-input/'
 
-        port = 12323
+        port = 12353
 
         # Create interfaces
         wg0 = VppWgInterface(self,
diff --git a/src/plugins/wireguard/wireguard.c b/src/plugins/wireguard/wireguard.c
index 9510a0ad3..38628f87d 100755
--- a/src/plugins/wireguard/wireguard.c
+++ b/src/plugins/wireguard/wireguard.c
@@ -55,6 +55,7 @@ VNET_FEATURE_INIT (wg_output_tun, static) =
 {
   .arc_name = "ip4-output",
   .node_name = "wg-output-tun",
+  .runs_after = VNET_FEATURES ("gso-ip4"),
 };
 
 VLIB_PLUGIN_REGISTER () =
diff --git a/src/plugins/wireguard/wireguard.h b/src/plugins/wireguard/wireguard.h
index 2c892a374..ef308c4c3 100755
--- a/src/plugins/wireguard/wireguard.h
+++ b/src/plugins/wireguard/wireguard.h
@@ -41,12 +41,16 @@ typedef struct
   u32 out_fq_index;
 
   wg_per_thread_data_t *per_thread_data;
+  u8 feature_init;
 
   tw_timer_wheel_16t_2w_512sl_t timer_wheel;
 } wg_main_t;
 
 extern wg_main_t wg_main;
 
+#define WG_START_EVENT	1
+void wg_feature_init (wg_main_t * wmp);
+
 #endif /* __included_wg_h__ */
 
 /*
diff --git a/src/plugins/wireguard/wireguard_api.c b/src/plugins/wireguard/wireguard_api.c
index 27ed6ea05..c9fe1e1a2 100755
--- a/src/plugins/wireguard/wireguard_api.c
+++ b/src/plugins/wireguard/wireguard_api.c
@@ -1,4 +1,5 @@
 /*
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,6 +43,8 @@ static void
   u32 sw_if_index = ~0;
   int rv = 0;
 
+  wg_feature_init (wmp);
+
   ip_address_decode2 (&mp->interface.src_ip, &src);
 
   if (AF_IP6 == ip_addr_version (&src))
@@ -74,6 +77,8 @@ static void
   wg_main_t *wmp = &wg_main;
   int rv = 0;
 
+  wg_feature_init (wmp);
+
   VALIDATE_SW_IF_INDEX (mp);
 
   rv = wg_if_delete (ntohl (mp->sw_if_index));
@@ -124,6 +129,9 @@ vl_api_wireguard_interface_dump_t_handler (vl_api_wireguard_interface_dump_t *
 					   mp)
 {
   vl_api_registration_t *reg;
+  wg_main_t *wmp = &wg_main;
+
+  wg_feature_init (wmp);
 
   reg = vl_api_client_index_to_registration (mp->client_index);
   if (reg == 0)
@@ -156,6 +164,8 @@ vl_api_wireguard_peer_add_t_handler (vl_api_wireguard_peer_add_t * mp)
       goto done;
     }
 
+  wg_feature_init (wmp);
+
   vec_validate (allowed_ips, mp->peer.n_allowed_ips - 1);
   ip_address_decode2 (&mp->peer.endpoint, &endpoint);
 
@@ -194,6 +204,8 @@ vl_api_wireguard_peer_remove_t_handler (vl_api_wireguard_peer_remove_t * mp)
   wg_main_t *wmp = &wg_main;
   int rv = 0;
 
+  wg_feature_init (wmp);
+
   rv = wg_peer_remove (ntohl (mp->peer_index));
 
   /* *INDENT-OFF* */
@@ -246,6 +258,9 @@ static void
 vl_api_wireguard_peers_dump_t_handler (vl_api_wireguard_peers_dump_t * mp)
 {
   vl_api_registration_t *reg;
+  wg_main_t *wmp = &wg_main;
+
+  wg_feature_init (wmp);
 
   reg = vl_api_client_index_to_registration (mp->client_index);
   if (reg == NULL)
diff --git a/src/plugins/wireguard/wireguard_cli.c b/src/plugins/wireguard/wireguard_cli.c
index 7fdccdc64..3b4bf56a3 100755
--- a/src/plugins/wireguard/wireguard_cli.c
+++ b/src/plugins/wireguard/wireguard_cli.c
@@ -1,4 +1,5 @@
 /*
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +23,7 @@ static clib_error_t *
 wg_if_create_cli (vlib_main_t * vm,
 		  unformat_input_t * input, vlib_cli_command_t * cmd)
 {
+  wg_main_t *wmp = &wg_main;
   unformat_input_t _line_input, *line_input = &_line_input;
   u8 private_key[NOISE_PUBLIC_KEY_LEN];
   u32 instance, sw_if_index;
@@ -36,6 +38,8 @@ wg_if_create_cli (vlib_main_t * vm,
   private_key_64 = 0;
   port = 0;
 
+  wg_feature_init (wmp);
+
   if (unformat_user (input, unformat_line_input, line_input))
     {
       while (unformat_check_input (line_input) != UNFORMAT_END_OF_INPUT)
@@ -103,10 +107,13 @@ static clib_error_t *
 wg_if_delete_cli (vlib_main_t * vm,
 		  unformat_input_t * input, vlib_cli_command_t * cmd)
 {
+  wg_main_t *wmp = &wg_main;
   vnet_main_t *vnm;
   u32 sw_if_index;
   int rv;
 
+  wg_feature_init (wmp);
+
   vnm = vnet_get_main ();
   sw_if_index = ~0;
 
@@ -150,6 +157,7 @@ wg_peer_add_command_fn (vlib_main_t * vm,
 			unformat_input_t * input, vlib_cli_command_t * cmd)
 {
   vnet_main_t *vnm = vnet_get_main ();
+  wg_main_t *wmp = &wg_main;
   clib_error_t *error = NULL;
   unformat_input_t _line_input, *line_input = &_line_input;
 
@@ -167,6 +175,8 @@ wg_peer_add_command_fn (vlib_main_t * vm,
   if (!unformat_user (input, unformat_line_input, line_input))
     return 0;
 
+  wg_feature_init (wmp);
+
   while (unformat_check_input (line_input) != UNFORMAT_END_OF_INPUT)
     {
       if (unformat (line_input, "public-key %s", &public_key_64))
@@ -258,6 +268,7 @@ static clib_error_t *
 wg_peer_remove_command_fn (vlib_main_t * vm,
 			   unformat_input_t * input, vlib_cli_command_t * cmd)
 {
+  wg_main_t *wmp = &wg_main;
   clib_error_t *error = NULL;
   u32 peer_index;
   int rv;
@@ -266,6 +277,8 @@ wg_peer_remove_command_fn (vlib_main_t * vm,
   if (!unformat_user (input, unformat_line_input, line_input))
     return 0;
 
+  wg_feature_init (wmp);
+
   if (unformat (line_input, "%d", &peer_index))
     ;
   else
@@ -335,6 +348,10 @@ static clib_error_t *
 wg_show_if_command_fn (vlib_main_t * vm,
 		       unformat_input_t * input, vlib_cli_command_t * cmd)
 {
+  wg_main_t *wmp = &wg_main;
+
+  wg_feature_init (wmp);
+
   wg_if_walk (wg_if_show_one, vm);
 
   return NULL;
diff --git a/src/plugins/wireguard/wireguard_handoff.c b/src/plugins/wireguard/wireguard_handoff.c
index 8a2efa508..3957af9fe 100644
--- a/src/plugins/wireguard/wireguard_handoff.c
+++ b/src/plugins/wireguard/wireguard_handoff.c
@@ -1,4 +1,5 @@
 /*
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -158,35 +159,49 @@ VLIB_NODE_FN (wg_output_tun_handoff) (vlib_main_t * vm,
 		     WG_HANDOFF_OUT_TUN);
 }
 
+/* *INDENT-OFF* */
 VLIB_REGISTER_NODE (wg_handshake_handoff) =
 {
-  .name = "wg-handshake-handoff",.vector_size = sizeof (u32),.format_trace =
-    format_wg_handoff_trace,.type = VLIB_NODE_TYPE_INTERNAL,.n_errors =
-    ARRAY_LEN (wg_handoff_error_strings),.error_strings =
-    wg_handoff_error_strings,.n_next_nodes = 1,.next_nodes =
-  {
-  [0] = "error-drop",}
-,};
+  .name = "wg-handshake-handoff",
+  .vector_size = sizeof (u32),
+  .format_trace = format_wg_handoff_trace,
+  .type = VLIB_NODE_TYPE_INTERNAL,
+  .n_errors = ARRAY_LEN (wg_handoff_error_strings),
+  .error_strings = wg_handoff_error_strings,
+  .n_next_nodes = 1,
+  .next_nodes = {
+    [0] = "error-drop",
+  },
+};
 
 VLIB_REGISTER_NODE (wg_input_data_handoff) =
 {
-  .name = "wg-input-data-handoff",.vector_size = sizeof (u32),.format_trace =
-    format_wg_handoff_trace,.type = VLIB_NODE_TYPE_INTERNAL,.n_errors =
-    ARRAY_LEN (wg_handoff_error_strings),.error_strings =
-    wg_handoff_error_strings,.n_next_nodes = 1,.next_nodes =
-  {
-  [0] = "error-drop",}
-,};
+  .name = "wg-input-data-handoff",
+  .vector_size = sizeof (u32),
+  .format_trace = format_wg_handoff_trace,
+  .type = VLIB_NODE_TYPE_INTERNAL,
+  .n_errors = ARRAY_LEN (wg_handoff_error_strings),
+  .error_strings = wg_handoff_error_strings,
+  .n_next_nodes = 1,
+  .next_nodes = {
+    [0] = "error-drop",
+  },
+};
 
 VLIB_REGISTER_NODE (wg_output_tun_handoff) =
 {
-  .name = "wg-output-tun-handoff",.vector_size = sizeof (u32),.format_trace =
-    format_wg_handoff_trace,.type = VLIB_NODE_TYPE_INTERNAL,.n_errors =
-    ARRAY_LEN (wg_handoff_error_strings),.error_strings =
-    wg_handoff_error_strings,.n_next_nodes = 1,.next_nodes =
-  {
-  [0] = "error-drop",}
-,};
+  .name = "wg-output-tun-handoff",
+  .vector_size = sizeof (u32),
+  .format_trace = format_wg_handoff_trace,
+  .type = VLIB_NODE_TYPE_INTERNAL,
+  .n_errors = ARRAY_LEN (wg_handoff_error_strings),
+  .error_strings = wg_handoff_error_strings,
+  .n_next_nodes = 1,
+  .next_nodes =  {
+    [0] = "error-drop",
+  },
+};
+/* *INDENT-ON* */
 
 /*
  * fd.io coding-style-patch-verification: ON
diff --git a/src/plugins/wireguard/wireguard_if.c b/src/plugins/wireguard/wireguard_if.c
index 7509923a1..3c59407e3 100644
--- a/src/plugins/wireguard/wireguard_if.c
+++ b/src/plugins/wireguard/wireguard_if.c
@@ -1,3 +1,18 @@
+/*
+ * Copyright (c) 2020 Cisco and/or its affiliates.
+ * Copyright (c) 2020 Doc.ai and/or its affiliates.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
 #include <vnet/adj/adj_midchain.h>
 #include <vnet/udp/udp.h>
@@ -235,6 +250,13 @@ wg_if_create (u32 user_instance,
 
   *sw_if_indexp = (u32) ~ 0;
 
+  /*
+   * Check if the required port is already in use
+   */
+  udp_dst_port_info_t *pi = udp_get_dst_port_info (&udp_main, port, UDP_IP4);
+  if (pi)
+    return VNET_API_ERROR_UDP_PORT_TAKEN;
+
   /*
    * Allocate a wg_if instance. Either select on dynamically
    * or try to use the desired user_instance number.
diff --git a/src/plugins/wireguard/wireguard_if.h b/src/plugins/wireguard/wireguard_if.h
index d8c2a87dc..7c11ad9b2 100644
--- a/src/plugins/wireguard/wireguard_if.h
+++ b/src/plugins/wireguard/wireguard_if.h
@@ -1,4 +1,5 @@
 /*
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/src/plugins/wireguard/wireguard_input.c b/src/plugins/wireguard/wireguard_input.c
old mode 100755
new mode 100644
index b15c265cd..6a587fa06
--- a/src/plugins/wireguard/wireguard_input.c
+++ b/src/plugins/wireguard/wireguard_input.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
@@ -22,16 +23,17 @@
 #include <wireguard/wireguard_send.h>
 #include <wireguard/wireguard_if.h>
 
-#define foreach_wg_input_error                          \
-  _(NONE, "No error")                                   \
-  _(HANDSHAKE_MAC, "Invalid MAC handshake")             \
-  _(PEER, "Peer error")                                 \
-  _(INTERFACE, "Interface error")                       \
-  _(DECRYPTION, "Failed during decryption")             \
-  _(KEEPALIVE_SEND, "Failed while sending Keepalive")   \
-  _(HANDSHAKE_SEND, "Failed while sending Handshake")   \
-  _(TOO_BIG, "Packet too big")                          \
-  _(UNDEFINED, "Undefined error")
+#define foreach_wg_input_error                                                \
+  _ (NONE, "No error")                                                        \
+  _ (HANDSHAKE_MAC, "Invalid MAC handshake")                                  \
+  _ (PEER, "Peer error")                                                      \
+  _ (INTERFACE, "Interface error")                                            \
+  _ (DECRYPTION, "Failed during decryption")                                  \
+  _ (KEEPALIVE_SEND, "Failed while sending Keepalive")                        \
+  _ (HANDSHAKE_SEND, "Failed while sending Handshake")                        \
+  _ (HANDSHAKE_RECEIVE, "Failed while receiving Handshake")                   \
+  _ (TOO_BIG, "Packet too big")                                               \
+  _ (UNDEFINED, "Undefined error")
 
 typedef enum
 {
@@ -245,7 +247,7 @@ wg_handshake_process (vlib_main_t * vm, wg_main_t * wmp, vlib_buffer_t * b)
 	break;
       }
     default:
-      break;
+      return WG_INPUT_ERROR_HANDSHAKE_RECEIVE;
     }
 
   wg_timers_any_authenticated_packet_received (peer);
diff --git a/src/plugins/wireguard/wireguard_key.c b/src/plugins/wireguard/wireguard_key.c
index db8c48644..1ef1d8bf7 100755
--- a/src/plugins/wireguard/wireguard_key.c
+++ b/src/plugins/wireguard/wireguard_key.c
@@ -1,6 +1,5 @@
 /*
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
- * Copyright (c) 2005-2011 Jouni Malinen <j@w1.fi>.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
diff --git a/src/plugins/wireguard/wireguard_key.h b/src/plugins/wireguard/wireguard_key.h
index 6decca672..ed96fb1da 100755
--- a/src/plugins/wireguard/wireguard_key.h
+++ b/src/plugins/wireguard/wireguard_key.h
@@ -1,6 +1,5 @@
 /*
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
- * Copyright (c) 2005 Jouni Malinen <j@w1.fi>.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
diff --git a/src/plugins/wireguard/wireguard_noise.c b/src/plugins/wireguard/wireguard_noise.c
index 00b67109d..850be2c86 100755
--- a/src/plugins/wireguard/wireguard_noise.c
+++ b/src/plugins/wireguard/wireguard_noise.c
@@ -161,8 +161,8 @@ noise_create_initiation (vlib_main_t * vm, noise_remote_t * r,
   *s_idx = hs->hs_local_index;
   ret = true;
 error:
-  vnet_crypto_key_del (vm, key_idx);
   secure_zero_memory (key, NOISE_SYMMETRIC_KEY_LEN);
+  vnet_crypto_key_del (vm, key_idx);
   return ret;
 }
 
@@ -244,8 +244,8 @@ noise_consume_initiation (vlib_main_t * vm, noise_local_t * l,
   ret = true;
 
 error:
-  vnet_crypto_key_del (vm, key_idx);
   secure_zero_memory (key, NOISE_SYMMETRIC_KEY_LEN);
+  vnet_crypto_key_del (vm, key_idx);
   secure_zero_memory (&hs, sizeof (hs));
   return ret;
 }
@@ -297,8 +297,8 @@ noise_create_response (vlib_main_t * vm, noise_remote_t * r, uint32_t * s_idx,
   *s_idx = hs->hs_local_index;
   ret = true;
 error:
-  vnet_crypto_key_del (vm, key_idx);
   secure_zero_memory (key, NOISE_SYMMETRIC_KEY_LEN);
+  vnet_crypto_key_del (vm, key_idx);
   secure_zero_memory (e, NOISE_PUBLIC_KEY_LEN);
   return ret;
 }
@@ -358,9 +358,9 @@ noise_consume_response (vlib_main_t * vm, noise_remote_t * r, uint32_t s_idx,
       ret = true;
     }
 error:
-  vnet_crypto_key_del (vm, key_idx);
   secure_zero_memory (&hs, sizeof (hs));
   secure_zero_memory (key, NOISE_SYMMETRIC_KEY_LEN);
+  vnet_crypto_key_del (vm, key_idx);
   return ret;
 }
 
diff --git a/src/plugins/wireguard/wireguard_output_tun.c b/src/plugins/wireguard/wireguard_output_tun.c
index 9a8710b77..53a8797c9 100755
--- a/src/plugins/wireguard/wireguard_output_tun.c
+++ b/src/plugins/wireguard/wireguard_output_tun.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
diff --git a/src/plugins/wireguard/wireguard_peer.c b/src/plugins/wireguard/wireguard_peer.c
index b41118f83..c22a29eb8 100755
--- a/src/plugins/wireguard/wireguard_peer.c
+++ b/src/plugins/wireguard/wireguard_peer.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
@@ -80,6 +81,7 @@ wg_peer_clear (vlib_main_t * vm, wg_peer_t * peer)
   for (int i = 0; i < WG_N_TIMERS; i++)
     {
       peer->timers[i] = ~0;
+      peer->timers_dispatched[i] = 0;
     }
 
   peer->last_sent_handshake = vlib_time_now (vm) - (REKEY_TIMEOUT + 1);
diff --git a/src/plugins/wireguard/wireguard_peer.h b/src/plugins/wireguard/wireguard_peer.h
old mode 100755
new mode 100644
index 009a6f67a..b60c669ac
--- a/src/plugins/wireguard/wireguard_peer.h
+++ b/src/plugins/wireguard/wireguard_peer.h
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
@@ -70,6 +71,7 @@ typedef struct wg_peer
   /* Timers */
   tw_timer_wheel_16t_2w_512sl_t *timer_wheel;
   u32 timers[WG_N_TIMERS];
+  u8 timers_dispatched[WG_N_TIMERS];
   u32 timer_handshake_attempts;
   u16 persistent_keepalive_interval;
 
diff --git a/src/plugins/wireguard/wireguard_send.c b/src/plugins/wireguard/wireguard_send.c
index 2e29a9b4b..0b6c1d3b3 100755
--- a/src/plugins/wireguard/wireguard_send.c
+++ b/src/plugins/wireguard/wireguard_send.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
diff --git a/src/plugins/wireguard/wireguard_send.h b/src/plugins/wireguard/wireguard_send.h
index efe419494..9575b84b6 100755
--- a/src/plugins/wireguard/wireguard_send.h
+++ b/src/plugins/wireguard/wireguard_send.h
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2020 Doc.ai and/or its affiliates.
+ * Copyright (c) 2020 Cisco and/or its affiliates.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
diff --git a/src/plugins/wireguard/wireguard_timer.c b/src/plugins/wireguard/wireguard_timer.c
old mode 100755
new mode 100644
index b7fd6891d..b245b853f
--- a/src/plugins/wireguard/wireguard_timer.c
+++ b/src/plugins/wireguard/wireguard_timer.c
@@ -62,7 +62,6 @@ start_timer_thread_fn (void *arg)
 {
   wg_timers_args *a = arg;
   wg_peer_t *peer = wg_peer_get (a->peer_idx);
-
   start_timer (peer, a->timer_id, a->interval_ticks);
   return 0;
 }
@@ -75,8 +74,11 @@ start_timer_from_mt (u32 peer_idx, u32 timer_id, u32 interval_ticks)
     .timer_id = timer_id,
     .interval_ticks = interval_ticks,
   };
-
-  vl_api_rpc_call_main_thread (start_timer_thread_fn, (u8 *) & a, sizeof (a));
+  wg_peer_t *peer = wg_peer_get (peer_idx);
+  if (PREDICT_FALSE (!peer->timers_dispatched[timer_id]))
+    if (!clib_atomic_cmp_and_swap (&peer->timers_dispatched[timer_id], 0, 1))
+      vl_api_rpc_call_main_thread (start_timer_thread_fn, (u8 *) &a,
+				   sizeof (a));
 }
 
 static inline u32
@@ -295,6 +297,9 @@ expired_timer_callback (u32 * expired_timers)
 
       peer = wg_peer_get (pool_index);
       peer->timers[timer_id] = ~0;
+
+      /* Under barrier, no sync needed */
+      peer->timers_dispatched[timer_id] = 0;
     }
 
   for (i = 0; i < vec_len (expired_timers); i++)
@@ -334,7 +339,6 @@ wg_timer_wheel_init ()
   tw_timer_wheel_init_16t_2w_512sl (tw,
 				    expired_timer_callback,
 				    WG_TICK /* timer period in s */ , ~0);
-  tw->last_run_time = vlib_time_now (wmp->vlib_main);
 }
 
 static uword
@@ -342,6 +346,28 @@ wg_timer_mngr_fn (vlib_main_t * vm, vlib_node_runtime_t * rt,
 		  vlib_frame_t * f)
 {
   wg_main_t *wmp = &wg_main;
+  uword event_type = 0;
+
+  /* Park the process until the feature is configured */
+  while (1)
+    {
+      vlib_process_wait_for_event (vm);
+      event_type = vlib_process_get_events (vm, 0);
+      if (event_type == WG_START_EVENT)
+	{
+	  break;
+	}
+      else
+	{
+	  clib_warning ("Unknown event type %d", event_type);
+	}
+    }
+  /*
+   * Reset the timer wheel time so it won't try to
+   * expire Avogadro's number of time slots.
+   */
+  wmp->timer_wheel.last_run_time = vlib_time_now (vm);
+
   while (1)
     {
       vlib_process_wait_for_event_or_clock (vm, WG_TICK);
@@ -377,6 +403,18 @@ VLIB_REGISTER_NODE (wg_timer_mngr_node, static) = {
 };
 /* *INDENT-ON* */
 
+void
+wg_feature_init (wg_main_t * wmp)
+{
+  if (wmp->feature_init)
+    return;
+  vlib_process_signal_event (wmp->vlib_main, wg_timer_mngr_node.index,
+			     WG_START_EVENT, 0);
+  wmp->feature_init = 1;
+}
+
+
+
 /*
  * fd.io coding-style-patch-verification: ON
  *
diff --git a/src/plugins/wireguard/wireguard_timer.h b/src/plugins/wireguard/wireguard_timer.h
index 2cc5dd012..6b59a39f8 100755
--- a/src/plugins/wireguard/wireguard_timer.h
+++ b/src/plugins/wireguard/wireguard_timer.h
@@ -57,7 +57,6 @@ wg_birthdate_has_expired (f64 birthday_seconds, f64 expiration_seconds)
   return (birthday_seconds + expiration_seconds) < now_seconds;
 }
 
-
 #endif /* __included_wg_timer_h__ */
 
 /*
-- 
2.25.1

